{"version":3,"file":"static/js/138.f4789a2c.chunk.js","mappings":"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","sources":["api/movie-api.js","webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","hooks/useFetchMoviesByQuery.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers={\n    accept: 'application/json',\n    authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0MWU5OGVkNjRhOTMyNTViMWE1OGRkYTBjMmQ3ZjgyZCIsIm5iZiI6MTY4ODEzNTI2MS40ODgsInN1YiI6IjY0OWVlNjVkMDkxZTYyMDEwYzExYTc1YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.a3L17ajXIWbEuURTA8EQUPauHRGZSTBkQ0zYI6QS9vI',\n}\n\n\nasync function getTrendingMovies (abortCtrl) {\n    axios.defaults.params={ language: 'en-US', }\n    const { data } = await axios.get(`/trending/movie/day`, {signal: abortCtrl.signal,});\n    return data.results;\n};\n\nasync function getMoviesByQuery(filter, abortCtrl ) {\n    \n    axios.defaults.params = { query : filter, \n                              include_adult : false,\n                              page : \"1\"\n                            };\n    const { data } = await axios.get(`/search/movie`, {signal: abortCtrl.signal,});\n    return data.results;\n}\n\nasync function getMovieDetails(movie_id, abortCtrl ) {\n    axios.defaults.params={ language: 'en-US', };\n    const {data} = await axios.get(`movie/${movie_id}`, {signal: abortCtrl.signal,});\n    return data;\n}\n\nasync function getMovieCast(movie_id, abortCtrl ) {\n    axios.defaults.params={ language: 'en-US', }\n    const { data } = await axios.get(`movie/${movie_id}/credits`, {signal: abortCtrl.signal,});\n    return data.cast;\n}\n\nasync function getMovieReviews(movie_id, abortCtrl ) {\n    axios.defaults.params={ language: 'en-US', }\n    const { data } = await axios.get(`movie/${movie_id}/reviews`, {signal: abortCtrl.signal,});\n    return data.results;\n}\n\nexport {\n    getTrendingMovies,\n    getMoviesByQuery,\n    getMovieDetails,\n    getMovieCast,\n    getMovieReviews,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__yjDCC\",\"li\":\"MovieList_li__kXkJl\"};","import {Link, useLocation} from \"react-router-dom\";\nimport { paths } from \"routes\";\nimport css from \"./MovieList.module.css\";\n\nexport const MovieList= ({movies}) => {\n\n    const location = useLocation();\n        \n    return (movies.length > 0) &&   <ul className={css.list}>\n                                        {movies.map(({id, title, year}) => <li className={css.li} key={id}>\n                                                                                <Link to={`${paths.MOVIES}/${id}`} state={{from: location}} className={css.link}>\n                                                                                    {title} {year}\n                                                                                </Link>\n                                                                           </li>\n                                        )}\n                                    </ul>\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__o80os\",\"input\":\"SearchForm_input__HOxJo\",\"btn\":\"SearchForm_btn__TXrR3\"};","import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport css from \"./SearchForm.module.css\";\n\nexport const SearchForm = ({onSubmit}) => {\n\n    const [query, setQuery] = useState(\"\");\n\n    const onSubmitHandle = (e) => {\n        e.preventDefault();\n        if (!query.trim()){\n            return toast('The query is empty! Please, point what do you want to find!');\n        }\n        onSubmit(query);\n        setQuery(\"\");\n    }\n\n    const onChangeQuery = ({target}) => {\n        setQuery(target.value);\n    }\n\n    return  <form onSubmit={onSubmitHandle} className={css.form}>\n                <input \n                    className={css.input}\n                    id=\"searchQuery\" \n                    type=\"text\" \n                    value={query} \n                    placeholder=\"search movie\" \n                    onChange={onChangeQuery}\n                />\n                <button className={css.btn} type=\"submit\">Search</button>\n            </form>\n}","import { SearchForm } from \"components/SearchForm/SearchForm\";\nimport { MovieList } from \"components/MovieList/MovieList\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { useFetchMoviesByQuery } from \"hooks/useFetchMoviesByQuery\";\n\nconst Movies = () => {\n\n    const {list, isLoading, error, onChangeParams} = useFetchMoviesByQuery();\n\n    return  <main>\n                <section>\n                    <div className=\"container\">\n\n                        <SearchForm onSubmit={onChangeParams}/>\n                        \n                        { list.length > 0 && <MovieList movies={list}/> }\n\n                        { isLoading && <Loader/> }\n\n                        { error && <p className=\"error\">{error}</p> }\n\n                    </div>\n                </section>\n            </main>\n}\nexport default Movies;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getMoviesByQuery } from \"api/movie-api\";\n\nexport const useFetchMoviesByQuery = () => {\n\n    const [list, setList] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    useEffect(()=>{\n        \n        const abortCtrl = new AbortController();\n        const query = searchParams.get(\"query\");\n\n        const fetchData = async () => {\n            try{\n                setIsLoading(true);\n                const data = await getMoviesByQuery(query, abortCtrl);\n                if (query && data.length === 0){\n                    setError(`We didn't find any movie for your query \"${query}\"`);\n                }\n                const movieList = data.map(({id, title, release_date}) => {\n                                                return {\n                                                            id,\n                                                            title,\n                                                            year: new Date(release_date).getFullYear()\n                                                        }\n                                            });\n                setList(movieList);\n            }catch(err){\n                if (!abortCtrl.signal?.aborted){\n                    setError(err.message);\n                }\n            }finally{\n                setIsLoading(false);\n            }\n        }\n        fetchData();\n\n        return () => {\n            abortCtrl.abort();\n        }\n\n    }, [searchParams]);\n\n    const onChangeParams = (query) => {\n        setSearchParams({query});\n    }\n\n    return {list, isLoading, error, onChangeParams};\n}"],"names":["getTrendingMovies","abortCtrl","axios","language","signal","data","results","getMoviesByQuery","filter","query","include_adult","page","getMovieDetails","movie_id","getMovieCast","cast","getMovieReviews","accept","authorization","MovieList","movies","location","useLocation","length","className","css","map","id","title","year","to","paths","state","from","SearchForm","onSubmit","useState","setQuery","e","preventDefault","trim","toast","type","value","placeholder","onChange","target","list","setList","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","useEffect","AbortController","get","fetchData","movieList","release_date","Date","getFullYear","aborted","message","abort","onChangeParams","useFetchMoviesByQuery","Loader"],"sourceRoot":""}